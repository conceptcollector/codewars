// Reversed Strings

export function solution( str: string ): string {
  
  let reversedString: string = '';
  
  // decrementing for loop, beginning at end of string
  for ( let i: number = str.length - 1; i >= 0; i-- ) {
    reversedString += str[i];
  }
  
  return reversedString;
  
}


// Convert a Boolean to a String

export const booleanToString = (b: boolean): string => {

  return b.toString();
  
};


// Sum of Positive

export function positiveSum( arr: number[] ): number {

  let sum: number = 0;
  
  // loop through array, checking for positive numbers to add
  for (let i: number = 0; i < arr.length; i++) {
    if (arr[i] > 0) {
      sum += arr[i];
    }
  }
  
  return sum;
  
}


// String Repeat

export function repeatStr(n: number, s: string): string {

  let repeatingS: string = '';
  
  while (n > 0) {
    repeatingS += s;
    n--;
  }
  
  return repeatingS;
  
}

// Will you make it?

/* Thankfully I was able to understand why I was doing everything backwards at just about
the same time that I decided I must be doing everything backwards. */

export const zeroFuel = (distance: number, mpg: number, fuelLeft: number): boolean {

  let makeIt: boolean = true;
  
  // if the distance / mpg was MORE than the fuel that was left, they wouldn't make it.
  if ((distance / mpg) > fuelLeft) {
    makeIt = false;
  }
  
    return makeIt;
    
};


// Are You Playing Banjo?

export function areYouPlayingBanjo(name: string): string {
  
  let banjoPlayer: string = " does not play banjo"
  
  // check the first character of name
  if (name[0] === 'R' || name[0] === 'r') {
    banjoPlayer = " plays banjo";
  }
  
  return name + banjoPlayer;
  
}


// Reverse Words
// Credit goes to Kunal Jain on StackOverflow for this one. I just copied and pasted and it worked.

export function reverseWords(str: string): string {

  // your code here
  return str.split("").reverse().join("").split(" ").reverse().join(" ");
    
}


// Valid Braces
/* Lots of credit to Code Maniac on StackOverflow.
I basically just recreated what they had done after reading through it. */

export function validBraces(braces: string): boolean {

  // create an empty array
  let valid: string[] = [];
  
  for ( let i: number = 0; i < braces.length; i++ ) {
    
    // write an if statement to begin filling valid with characters
    if ( braces[i] === "(" ||
         braces[i] === "[" ||
         braces[i] === "{" ) {
      valid.push( braces[i] )
    } else {
      if ( valid.length === 0 ) {
        return false;
      }
      // write an if statement checking closing braces against the most recent value
      let lastValue: string = valid[ valid.length-1 ];
      if ( braces[i] === ")" && lastValue === "(" ||
           braces[i] === "]" && lastValue === "[" ||
           braces[i] === "}" && lastValue === "{" ) {
        // remove every most recent brace, if it's valid
        valid.pop();
      } else {
        // equality operator always returns boolean
        return valid.length === 0;
      }
    }
  }
  return valid.length === 0;
}


// Disemvoweled Trolls

export class Kata {
  static disemvowel( str: string ): string {
    
    let disemvoweledTroll: string = '';
    
    let vowels: string[] = [
      'a', 'A',
      'e', 'E',
      'i', 'I',
      'o', 'O',
      'u', 'U'
    ];
    
    // check str for non-vowel letters to add to the new string
    for ( let i: number = 0; i < str.length; i++ ) {
      if ( !vowels.includes( str[i] ) ) {
        disemvoweledTroll += str[i];
    // skip vowels
      } else {
        continue;
      }
    }
    return disemvoweledTroll;
  }
}


// Find the Parity Outlier

export function findOutlier(integers: number[]): number {
  
  // set up two empty arrays
  let evens: number[] = [];
  let odds: number[] = [];
    
  for ( let i: number = 0; i < integers.length; i++ ) {
    
    // push (absolute, due to negative) even numbers into evens and odds into odds
    if ( Math.abs( integers[i] ) % 2 === 0 ) {
      evens.push( integers[i] );
      console.log(evens);
    } else if ( Math.abs( integers[i] ) % 2 === 1 ) {
      odds.push( integers[i] );
      console.log(odds);
    }
  }
    
  return (evens.length === 1 ? evens[0] : odds[0]);

}
